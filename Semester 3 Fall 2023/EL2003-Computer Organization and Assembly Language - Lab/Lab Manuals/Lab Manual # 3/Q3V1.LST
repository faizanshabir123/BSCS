     1                                  [org 0x0100]
     2                                  
     3 00000000 BE0000                        mov si,0         ; index for outre loop
     4 00000003 BF0000                  l1:   mov di,0         ; index for inner loop
     5 00000006 8A84[4000]                    mov al,[arr1+si] ; each value of arr1
     6                                  
     7 0000000A 8A95[4A00]              l2:   mov dl,[arr2+di] ; each value of arr2
     8 0000000E 38D0                          cmp al,dl        ; compare value of arr1 and arr2
     9 00000010 7403                          je if       
    10 00000012 E90D00                        jmp skip
    11 00000015 8A1E[3B00]              if:   mov bl,[k]       ; intersection of values
    12 00000019 8897[5400]                    mov [arr3+bx],dl
    13 0000001D 8006[3B00]01                  add byte[k],1
    14 00000022 81C70100                skip: add di,1         ; update index for inner loop
    15 00000026 3B3E[3E00]                    cmp di,[len2]
    16 0000002A 75DE                          jne l2
    17                                        
    18 0000002C 81C60100                      add si,1         ; update index for outer loop
    19 00000030 3B36[3C00]                    cmp si,[len1]
    20 00000034 75CD                          jne l1
    21                                  
    22 00000036 B8004C                  end:  mov ax,0x4c00
    23 00000039 CD21                          int 0x21
    24 0000003B 00                      k:    db 0
    25 0000003C 0A00                    len1: dw 10
    26 0000003E 0A00                    len2: dw 10
    27 00000040 010203040506070809-     arr1: db 1,2,3,4,5,6,7,8,9,10
    28 00000049 0A                 
    29 0000004A 012B052108430A1732-     arr2: db 1,43,5,33,8,67,10,23,50,2
    30 00000053 02                 
    31 00000054 000000000000000000-     arr3: db 0,0,0,0,0,0,0,0,0,0
    32 0000005D 00                 
    33                                   
